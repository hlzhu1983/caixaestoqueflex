<?xml version="1.0" encoding="utf-8"?>
<mx:TitleWindow xmlns:mx="http://www.adobe.com/2006/mxml"
	 close="fechar()" 
	 creationComplete="init()"
	  showCloseButton="true"
	   layout="vertical" title="Gerenciamento Usuarios" xmlns:utilidades="utilidades.*" xmlns:botoes="utilidades.botoes.*" xmlns:inputs="utilidades.inputs.*" width="538" height="100%" borderColor="#D2D2D2">
	<mx:states>
		<mx:State name="st_alterarSenha">
			<mx:AddChild relativeTo="{this.hb_senhas}" position="before">
				<mx:VBox width="100%">
					<mx:Label text="Senha Antiga:"/>
					<inputs:TextoInput id="ti_senhaAntiga" requerido="true" displayAsPassword="true" click="{this.alterarSenha()}"/>
				</mx:VBox>
			</mx:AddChild>  
			<mx:AddChild relativeTo="{this.hb_botoes}" position="right">
				<botoes:SenhaButton id="bt_senha" click="{this.alterarSenha()}"/>					
			</mx:AddChild>  
			<mx:RemoveChild target="{this.lk_alterarSenha}"/>
			<mx:SetProperty target="{this.bt_salvar}" value="false" name="enabled"/>			
			<mx:SetProperty target="{this.bt_clean}" value="false" name="enabled"/>
			<mx:SetProperty target="{this.bt_remover}" value="false" name="enabled"/>
			<mx:SetProperty target="{this.hb_senhas}" value="true" name="visible"/>
			
		</mx:State>
	</mx:states>
	
	<mx:Script>
		<![CDATA[
			import org.idmedia.as3commons.util.AbstractCollection;
			import mx.events.ValidationResultEvent;
			import mx.validators.ValidationResult;
			import negocio.vo.UsuarioVO;
			import mx.managers.PopUpManager;
			import mx.events.CloseEvent;
			import mx.controls.Alert;
			import mx.collections.ArrayCollection;
			import mx.rpc.events.ResultEvent;
			import negocio.remote.Remote;
			
			[Bindable]
			private var usuariosArray:ArrayCollection;
			
			[Bindable]
			private var usuario:UsuarioVO = new UsuarioVO();;
			
			private var tipoPesquisa:String;
		
			private var ro:Remote = Remote.getInstance();
			
			private function init():void{
				ro.parent = this;
				this.listarAllUsuarios();
			}
			
			private function isPossivelAlterarSenha():void{
				
				if(this.lb_codInput.text == ""){
					Alert.show("Usuário nao existe!","Ops!",4,this);
				}else{
					this.currentState = 'st_alterarSenha';
				}
				
			}
			
			private function alterarSenha():void{
				if(this.ti_nome.validador.validate().type == ValidationResultEvent.INVALID){
					Alert.show("Campo nome obrigatorio!","Ops!");
				}else{
					
					if(this.ti_senha.text == ""){
							Alert.show("Campo senha obrigatorio!","Ops!");
						}else{
							if(this.ti_confSenha.text == ""){
								Alert.show("Campo conf. senha obrigatorio!","Ops!");
							}else{
								if(this.ti_confSenha.text == ""){
									Alert.show("Campo senha antiga obrigatoria!","Ops!");
								}else{
									if(this.ti_confSenha.text == this.ti_senha.text && this.usuario.senha == this.ti_senhaAntiga.text){
										this.usuario.nome = this.ti_nome.text;
										this.usuario.comissao = ti_comissao.getValor();
										this.usuario.login = this.ti_nome.text;
										this.usuario.senha = this.ti_senha.text;
										this.usuario.permissao = this.cb_permissao.selectedIndex;
										this.ro.atualizarUsuario(result_atualizarSenhaUsuario,this.usuario);											
									}else{
										Alert.show("Problema na alteração da senha!","Ops!",4,this);
										this.ti_confSenha.text = "";
										this.ti_senha.text = "";
									}
								
							}
						}
				}
			}
			}
			
			private function addUsuario():void{
				if(this.ti_nome.validador.validate().type == ValidationResultEvent.INVALID){
					Alert.show("Campo nome obrigatorio!","Ops!");
				}else{
					if(this.lb_codInput.text != ""){
						this.usuario.nome = this.ti_nome.text;
						this.usuario.comissao = ti_comissao.getValor();
						this.usuario.permissao = this.cb_permissao.selectedIndex;
						this.ro.atualizarUsuario(result_atualizarUsuario,this.usuario);
					}else if(this.ti_senha.text == ""){
							Alert.show("Campo senha obrigatorio!","Ops!");
						}else{
							if(this.ti_confSenha.text == ""){
								Alert.show("Campo conf. senha obrigatorio!","Ops!");
							}else{
								if(this.ti_confSenha.text == this.ti_senha.text ){
									this.usuario.nome = this.ti_nome.text;
									this.usuario.comissao = ti_comissao.getValor();
									this.usuario.login = this.ti_nome.text;
									this.usuario.senha = this.ti_senha.text;
									this.usuario.permissao = this.cb_permissao.selectedIndex;
									this.ro.salvarUsuario(resultadoAddUsuario,this.usuario);
								}else{
									Alert.show("Senha e Conf. Senha não são iguais!","Ops!",4,this);
									this.ti_confSenha.text = "";
									this.ti_senha.text = "";
								}
							}
						}
				}
			}
			
			private function result_atualizarUsuario(event:ResultEvent):void{
				this.limparCampos();
				Alert.show("Usuário Atualizado!","Sucesso",4,this);
			}
			
			private function result_atualizarSenhaUsuario(event:ResultEvent):void{
				this.currentState = '';
				Alert.show("Senha de Usuário Atualizada!","Sucesso",4,this);
			}
			
			private function resultadoAddUsuario(event:ResultEvent):void{
				this.usuariosArray.addItem(event.result);
				Alert.show("O item foi adicionado!","Sucesso!");
				this.limparCampos(); 
			}
			
			private function listarAllUsuarios():void{
				this.ro.listarUsuario(resultListarUsuarios); 
				
			}
			
			private function resultListarUsuarios(event:ResultEvent):void{
				this.usuariosArray = event.result as ArrayCollection; 
				
			}
			
			public function usuarioSelecionado(event:Event):void{
				this.usuario = event.currentTarget.selectedItem;
				this.lb_codInput.text = this.usuario.codigo.toString();
				this.ti_nome.text = this.usuario.nome;
				this.cb_permissao.selectedIndex = this.usuario.permissao;
				this.ti_comissao.setValor(this.usuario.comissao.toString());
                this.bt_remover.enabled = true; 
                this.currentState = '';
                this.hb_senhas.visible = false;
			}
			
			private function removerUsuario():void{
				if(this.grid_usuario.selectedIndex == -1){
					Alert.show("Selecione um Usuário!","Ops!",4,this);
				}else{
					this.usuario = this.grid_usuario.selectedItem as UsuarioVO;
					this.ro.removerUsuario(resultadoRemoverUsuario, this.usuario);
				}
			}
			
			private function resultadoRemoverUsuario(event:ResultEvent):void{
				if(event.result){
					Alert.show("O item foi removido!","Sucesso");
					this.usuariosArray.removeItemAt(this.grid_usuario.selectedIndex);
				}else{
					Alert.show("O item não pôde ser removido!","Ops!");					
				}
				this.limparCampos();
			}
			
			
			private function pesquisarItem():void{
				if(this.ti_pesquisa.text == ""){
					this.listarAllUsuarios();
				}else if(this.ti_pesquisa.validador.validate().type == ValidationResultEvent.VALID ){
					if(this.radio_codigo.selected){
						this.ro.pesquisarUsuario(resultadoPesquisaItem,this.ti_pesquisa.text,"codigo");
					}else{
						this.ro.pesquisarUsuario(resultadoPesquisaItem,this.ti_pesquisa.text,"nome");
					}
					
				}else{
					Alert.show("erro");
				}
			}
			
			private function resultadoPesquisaItem(event:ResultEvent):void{
				this.usuariosArray = new ArrayCollection(event.result as Array);
			}
			
			
			
			private function fechar():void{
				PopUpManager.removePopUp(this);
			}
			
			public function limparCampos():void{
				this.lb_codInput.text = "";
				this.ti_nome.text = "";
				this.ti_confSenha.text = "";
				this.ti_senha.text = "";
				this.ti_comissao.text = this.ti_comissao.valorDefault;
				this.grid_usuario.selectedIndex = -1;
				this.hb_senhas.visible = true;
				this.usuario = new UsuarioVO();
			}
			
		]]>
	</mx:Script>
	


	
	<mx:FormItem defaultButton="{this.bt_buscar}" label="Pesquisa" width="100%" height="30%" >
		<mx:HBox width="100%" height="50%">
			<inputs:TextoInput width="225" id="ti_pesquisa"  isEnter="false"/>
			<botoes:BuscarButton id="bt_buscar" click="{this.pesquisarItem()}"/>	
		</mx:HBox>		
		<mx:HBox width="100%" height="50%" >
			<mx:RadioButtonGroup id="grupo_pesquisa"/>
			<mx:RadioButton label="Código" id="radio_codigo" groupName="grupo_pesquisa"/>
			<mx:RadioButton label="Nome" id="radio_desc" groupName="grupo_pesquisa" selected="true"/>
		</mx:HBox>				
	</mx:FormItem>	
	
	<mx:VBox id="body" width="100%" height="70%">
		
		<mx:HBox id="hb_botoes" width="100%" horizontalAlign="right">
			<mx:LinkButton label="Alterar Senha?" id="lk_alterarSenha" click="{this.isPossivelAlterarSenha()}"/>
			<botoes:SalvarButton id="bt_salvar" click="addUsuario()"/>
			<botoes:ExcluirButton id="bt_remover" click="removerUsuario()"  enabled="false"/>
			<botoes:LimparButton  id="bt_clean" click="{this.limparCampos()}"/>
		</mx:HBox>
		
		<mx:HBox width="100%">
			<mx:Label text="Código: "/>
			<mx:Label id="lb_codInput"/>
		</mx:HBox>
		
		<mx:HBox width="100%">
			<mx:VBox width="186" height="100%">
				<mx:Label text="Nome: "/>
				<inputs:TextoInput id="ti_nome" requerido="true" width="180" maxChars="100"/>
			</mx:VBox>
			<mx:VBox>
				<mx:Label text="Tipo Usuario: "/>
				<mx:ComboBox id="cb_permissao">
					<mx:ArrayCollection>
						<mx:Object label = "Administrador" data="0"/>
						<mx:Object label = "Vendedor" data="1"/>
					</mx:ArrayCollection>
				</mx:ComboBox>
			</mx:VBox>
			<mx:VBox>
				<mx:Label text="Comissão: "/>
				<inputs:NumberInput id="ti_comissao" valorDefault="0,00"/>
			</mx:VBox>
		</mx:HBox>
		
		
		<mx:HBox id="hb_senhas" width="100%">
			<mx:VBox>
				<mx:Label text="Senha: "/>
				<mx:TextInput restrict="A-Z a-z 0-9 , @ . : / _ "  id="ti_senha" displayAsPassword="true" maxChars="10"/>
			</mx:VBox>
			<mx:VBox>
				<mx:Label text="Conf. Senha: "/>
				<mx:TextInput  restrict="A-Z a-z 0-9 , @ . : / _ " id="ti_confSenha" displayAsPassword="true"  maxChars="10"/>
			</mx:VBox>			
		</mx:HBox>
		
		
		
		<mx:DataGrid width="100%" id="grid_usuario" change="{usuarioSelecionado(event)}" dataProvider="{this.usuariosArray}">
			<mx:columns>
				<mx:DataGridColumn headerText="Código" dataField="codigo"/>
				<mx:DataGridColumn headerText="Nome" dataField="nome"/>			
			</mx:columns>
		</mx:DataGrid>
	</mx:VBox>	
</mx:TitleWindow>
