<?xml version="1.0" encoding="utf-8"?>
<mx:TitleWindow  xmlns:mx="http://www.adobe.com/2006/mxml" layout="absolute" 
	width="604" height="476" title="Compras"
	xmlns:utilidades="utilidades.*" fontSize="12" close="{fechar()}" showCloseButton="true"
	keyDown="{keyEvento(event)}"  backgroundAlpha="1.0" xmlns:inputs="utilidades.inputs.*" 
	xmlns:botoes="utilidades.botoes.*" xmlns:local="*" creationComplete="init()" alpha="1.0" xmlns:compra="modulos.compra.*">
	
	<mx:Script>
		<![CDATA[
			import negocio.vo.ItensReceitaVO;
			import events.CompraEvent;
			import modulos.fornecedor.BuscaFornecedor;
			import events.FornecedorEvent;
			import negocio.vo.FornecedorVO;
			import mx.events.ItemClickEvent;
			import negocio.vo.ItemCompraVO;
			import mx.managers.PopUpManager;
			import events.ProdutoEvent;
			import modulos.produto.BuscaProduto;
			import mx.rpc.events.ResultEvent;
			import events.ItemCompraEvent;
			import mx.core.Application;
			import negocio.vo.ProdutoVO;
			import utilidades.Util;
			import negocio.remote.Remote;
			import negocio.vo.CompraVO;
			import mx.events.ValidationResultEvent;
			import mx.controls.Alert;
			import mx.collections.ArrayCollection;
			import mx.events.CloseEvent;
			
			
			[Bindable]
			private var array_itensCompras:ArrayCollection = new ArrayCollection();
			[Bindable]
			private var array_viewItensCompras:ArrayCollection = new ArrayCollection();
			[Bindable]
			public var isProduto:Boolean = false;
			
			[Bindable]
			private var isFecharCompra:Boolean = false;
			private var titleWindow_BuscaCompra:BuscarCompra;
			
			[Bindable]
			public var compra:CompraVO;
			
			public var fornecedor:FornecedorVO;
			
			public var ro:Remote = Remote.getInstance();
			
			private var titleWindow_BuscaProduto:BuscaProduto;
			
			private var titleWindow_BuscaFornecedor:BuscaFornecedor;
			
			public var produto:ProdutoVO;
			
			[Bindable]
			public var valorTotal:Number = 0;
					
			private function init():void{
				this.ro.parent = this;
				this.limpar();
				
				
				this.focusManager.setFocus(this.codProduto);
			}
			
			private function fechar():void{
				PopUpManager.removePopUp(this);
			}
			
			private function removerItem():void{
				this.ro.removerCompra(resultadoRemover, this.compra);
				
				
			}
			private function resultadoRemover(event:ResultEvent):void{
				if(event.result==null){
				Alert.show("O item não pôde ser removido!","Ops!",4,this);
				}else{
				if(event.result){
					Alert.show("O item foi removido!","Sucesso",4,this);
				}else{
					Alert.show("O item não pôde ser removido!","Ops!",4,this);					
				}
				this.limpar();
				}
			}
			
			private function limpar():void{
				this.produto = new ProdutoVO();
				this.fornecedor = new FornecedorVO();
				this.ti_NF.text = "";
				this.ti_nomeFornecedor.text = "";
				this.bt_remover.enabled = false;
				this.compra = new CompraVO();
				this.compra.codigo =0; 
				this.compra.codUsuario = 0;
				this.compra.codFornecedor = 0;
				this.compra.NF = "";
				this.codProduto.text = "";
				this.produtos.selectedIndex = -1;
				this.array_itensCompras = new ArrayCollection();
			    this.add.label = "Salvar";
			}
			
			private function procurarFornecedor():void{
				this.titleWindow_BuscaFornecedor = BuscaFornecedor(Util.abrePopUp(this,BuscaFornecedor,true));
				this.titleWindow_BuscaFornecedor.addEventListener(FornecedorEvent.FORNECEDORSELECIONADO,result_buscaFornecedor);
			}
			
			private function pesquisarCompra():void{
				this.titleWindow_BuscaCompra = BuscarCompra(Util.abrePopUp(this,BuscarCompra,true));
				this.titleWindow_BuscaCompra.addEventListener(CompraEvent.COMPRASELECIONADA,itemSelecionado);
			}
			
			private function result_fornecedor(event:ResultEvent):void{
			var a:ArrayCollection = event.result as ArrayCollection;
				if(a.length == 0){
					Alert.show("Fornecedor inexistente!","Ops!",4,this);
				}else{
					this.fornecedor = a.getItemAt(0) as FornecedorVO;
				  this.ti_nomeFornecedor.text = this.fornecedor.nome;
				}
			}
			public function itemSelecionado(event:CompraEvent):void{
				this.compra = event.compra;
				this.ti_NF.text = this.compra.NF;
				this.ro.pesquisarFornecedor(result_fornecedor,this.compra.codFornecedor+"","codigo");
					
				this.array_itensCompras = this.compra.itemCompra;
				this.array_viewItensCompras = new ArrayCollection();
				
				for(var i:int = 0; i<array_itensCompras.length;i++){
					
				var item:ItemCompraVO = this.array_itensCompras.getItemAt(i) as ItemCompraVO;	
				 this.ro.pesquisarProduto(result_produto,item.codProduto+"","codigo");
				}
				this.bt_remover.enabled = true;
			  						
			} 
			private function result_produto(event:ResultEvent):void{
			    var a:ArrayCollection = event.result as ArrayCollection;
		     var icomp:ItemCompraVO = null;
		     var vcomp:viewItemCompra = new viewItemCompra();
		       
		       for(var i:int=0;i<this.array_itensCompras.length;i++){
		      
		     icomp =  this.array_itensCompras.getItemAt(i) as ItemCompraVO; 
		     
		     var produto:ProdutoVO = a.getItemAt(0) as ProdutoVO; 
		      if(icomp.codProduto==produto.codigo){
		       
		        vcomp.codProduto = icomp.codProduto;
		        vcomp.quantidade = icomp.quantidade;
		        vcomp.valorCompra = icomp.valorCompra;
		      	vcomp.descricao = produto.descricao;
		     
		      this.array_viewItensCompras.addItem(vcomp);
		      break;
		      }
		       }
		     
			}
			
			private function result_buscaFornecedor(event:FornecedorEvent):void{
				this.fornecedor = event.fornecedor;
				this.ti_nomeFornecedor.text = this.fornecedor.nome;
			}
			
			private function result_abrirCompra(event:ResultEvent):void{
				this.compra = event.result as CompraVO;
			}
			
			public function produtoSelecionado(e:ProdutoEvent):void{
				this.codProduto.text = e.produto.codigo.toString();
				this.previewProduto();
			}
			
			public function addItemProduto(event:ItemCompraEvent):void{
				event.itemCompra.codigoCompra = this.compra.codigo;
				var i:ItemCompraVO = event.itemCompra as ItemCompraVO;
				var v:viewItemCompra= new viewItemCompra();
				v.codigo = i.codigo;
				v.codProduto = i.codProduto;
				v.descricao  = i.descricao;
				v.quantidade = i.quantidade;
				v.valorCompra = i.valorCompra;
				this.array_itensCompras.addItem(i);
				this.array_viewItensCompras.addItem(v);				
				this.isProduto = true;
				this.focusManager.setFocus(this.codProduto);
			}
			
			
						
        	private function keyEvento(event:KeyboardEvent):void{
        		
        		switch(event.keyCode){
        			case 46:
        				if(event.ctrlKey){
	        				if(event.target == this.array_viewItensCompras){ 
	        					if(this.produtos.selectedIndex > -1){
	        						Alert.show("Deseja realmente deletar o item?",
	        							"Alerta",Alert.OK | Alert.CANCEL,this,removeItemArrayCollection,null,Alert.OK);
	        					}else{
	        						Alert.show("Não há item selecionado!","Ops!",4,this);
	        					}							
	        				}
        				}
        				break;
        		}
        	}
        	
        	public function removeItemArrayCollection(event:CloseEvent):void{
        		if(event.detail == Alert.OK){
        			
        			 this.removerItemArray();
        			
        			}
        		
        	}
        	
        	
        	private function removerItemArray():void{
        		  var a:viewItemCompra =this.array_viewItensCompras.getItemAt(this.produtos.selectedIndex) as viewItemCompra;
        	
        		for(var i:int=0;i<this.array_itensCompras.length;i++){
        		 var icompra:ItemCompraVO = this.array_itensCompras.getItemAt(i) as ItemCompraVO;
        		if(icompra.codigo==a.codigo){
        		 icompra.status = 1;
        		}
        		}
        			 this.array_viewItensCompras.removeItemAt(this.produtos.selectedIndex);	
        			        			
						
        	}
			
			public function onCloseCommand(event:Event):void{
				if(!isFecharCompra){
					event.preventDefault();
					this.cancelarCompra();
				}				
   			}	
			
			
			public function previewProduto():void{
				
				if(this.codProduto.validador.validate().type == ValidationResultEvent.INVALID){
					this.codProduto.setFocus();
				}else{
					this.ro.getProduto(result_previewProduto,this.codProduto.text,"codigo");
				}
			}
			
			public function result_previewProduto(e:ResultEvent):void{
				if(e.result == null){
					Alert.show("Produto não exite","Ops!",4,this,focusTextCodProduto);
				}else{
					var pvProduto:PreviewProdutoTitleWindow = PreviewProdutoTitleWindow(Util.abrePopUp(this,PreviewProdutoTitleWindow,true));
					pvProduto.setProduto(e.result as ProdutoVO);
					pvProduto.addEventListener(ItemCompraEvent.ADICIONADOSUCEESSO,addItemProduto);
					
					
				}
			}
			
			public function focusTextCodProduto(e:Event):void{
				this.codProduto.setFocus();
			}
			
			public function pesquisarProduto():void{
				var p:BuscaProduto = BuscaProduto(Util.abrePopUp(this,BuscaProduto,true));
				p.addEventListener(ProdutoEvent.PRODUTOSELECIONADO,produtoSelecionado);
			}
			
			private function fecharCompra():void{
				
					if(this.fornecedor!=null){
					if(this.array_itensCompras.length>0){
					this.compra.itemCompra = this.array_itensCompras;
					
					Alert.show((this.compra.itemCompra.getItemAt(1) as ItemCompraVO).codigo+" a");
					this.compra.codFornecedor = this.fornecedor.codigo;
					this.compra.NF = this.ti_NF.text;
					this.compra.codUsuario = ConfiguracoesSistema.usuario.codigo;
					if(this.compra.codigo==0){
					this.ro.fecharCompra(result_fecharCompra,this.compra);}else
					{
					this.ro.atualizarCompra(result_fecharCompra,this.compra);
					}
				//	Util.abrePopUp(this,Impressao,true);
					
			//		new PrintCompra(this.i);
					}else Alert.show("Adicione um Produto","Ops!",4,this);
					}else{
						Alert.show("Selecione um Fornecedor","Ops!",4,this);
					}
				
			}
			
			private function result_fecharCompra(e:ResultEvent):void{
				this.isFecharCompra = true;
				Alert.show("Compra gerada com sucesso","Aew!",4,this,this.fechando);
			}
			
			private function fechando(event:Event):void{
				this.fechar();
			}
			
			private function cancelarCompra():void{
				Alert.show("Deseja realemente cancelar a Compra?","Opa!",Alert.YES|Alert.NO,this,resposta_cancelarCompra);
			}
			
			private function resposta_cancelarCompra(event:CloseEvent):void{
				if(event.detail == Alert.YES){
				//	this.ro.cancelarCompra(result_cancelarCompra,this.compra);					
				this.isFecharCompra = true;
				this.stage.nativeWindow.close();
				}
				
			}
			
		
			
			
			
		]]>
	</mx:Script>
			<mx:DataGrid id="produtos"  width="568"  height="171" rowCount="10" dataProvider="{array_viewItensCompras}" x="10" y="208">
				<mx:columns>
					<mx:DataGridColumn headerText="Cod. Produto" dataField="codProduto"/>
					<mx:DataGridColumn headerText="Descrição" dataField="descricao"/>
					<mx:DataGridColumn headerText="Quantidade" dataField="quantidade"/>					
					<mx:DataGridColumn headerText="Valor de Compra" dataField="valorCompra"/>
				</mx:columns>
			</mx:DataGrid>
			<mx:Panel layout="absolute" height="94" width="564" x="10" y="104" title="Inserção de Produto">
				<mx:Label text="Código Produto:" x="18" y="17" fontSize="12"/>
				<inputs:InteiroInput  id="codProduto" requerido="true"  enter="{this.previewProduto()}" isEnter="false" x="129" y="15" fontSize="12" width="159"/>
				<botoes:BuscarButton  x="296" y="13" click="{this.pesquisarProduto()}" height="27"/>
			</mx:Panel>
	
	<!--<prevenda:Impressao id="i" pVenda="{this.compra}" visible="false"/>-->
	<mx:Label x="10" y="76" text="Fornecedor:"/>
	<mx:Label x="10" y="48" text="N° da Nota:" width="81"/>
	<botoes:BuscarButton x="350" y="74" click="{this.procurarFornecedor()}" height="24" label="Buscar Fornecedor" width="174"/>
	<botoes:BuscarButton x="10"  y="10" click="{this.pesquisarCompra()}" height="24" label="Buscar Compra" width="149"/>
	<mx:TextInput id="ti_nomeFornecedor" x="99" y="74" width="243" editable="false" borderColor="#CBCCCD" backgroundColor="#AABDF3" color="#000000" fontWeight="bold"/>
	<mx:TextInput  id="ti_NF"   enter="{this.previewProduto()}" x="99" y="46" fontSize="12" width="151"/>
	<botoes:SalvarButton id="add" x="228" y="387" click="{this.fecharCompra()}"/>
	<botoes:ExcluirButton id ="bt_remover"  x="354" y="387" click="{this.removerItem()}" enabled="false"/>
	<botoes:LimparButton x="475" y="387" click="{this.limpar()}"/>
</mx:TitleWindow>
