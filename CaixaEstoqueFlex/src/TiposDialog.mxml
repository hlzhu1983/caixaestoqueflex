<?xml version="1.0" encoding="utf-8"?>
<mx:WindowedApplication xmlns:mx="http://www.adobe.com/2006/mxml" 
	layout="absolute" applicationComplete="init();" showStatusBar="false" height="400" width="394" 
	title="Window Sampler" menu="{flexMenu}">
	<mx:Script>
		<![CDATA[
			import mx.events.FlexNativeMenuEvent;
			import mx.controls.DateChooser;
			import mx.controls.ColorPicker;
			import flash.html.HTMLLoader;
		    import flash.display.NativeWindow;
		    import flash.display.NativeWindowInitOptions;
		    import flash.display.NativeWindowType;
		    import flash.display.NativeWindowSystemChrome;
		    import flash.display.StageAlign;
		    import flash.display.StageScaleMode;
		    import mx.core.Window;
		    
   			private var sourceView:HTMLLoader = new HTMLLoader();

			//initialize this (launcher) window			
			private function init():void {
				
				//exit the application when the main window is closed
				this.stage.nativeWindow.addEventListener(Event.CLOSE,function(e:Event):void{
						NativeApplication.nativeApplication.exit();
					});

				//Set up source viewer
				sourceView.loadString('<html><head>' +
								  '	<script src="html/AIRAliases.js" type="text/javascript"></script>' +
								  '	<script src="SourceViewer/SourceViewer.js" type="text/javascript"></script>' + 
								  ' </head><body></body></html>');						
			}
			
			//Call the creator function for the selected type of window
			private function createWindow():void{
				if(flex.selected){
					createNewFlexWindow();
				}
				if(html.selected){
					createNewHTMLWindow();
				}
				if(actionscript.selected){
					createNewActionScriptWindow();
				}
			}
			
			//create a new Flex (mx:Window) window
			private function createNewFlexWindow():void{
				var newWindow:Window = new Window();
					
				newWindow.maximizable = maximizableOption.selected;
				newWindow.minimizable = minimizableOption.selected;
				newWindow.resizable = resizableOption.selected; 
				newWindow.transparent = transparentOption.selected;
				newWindow.systemChrome = Chrome.selectedItem.optionString;
				newWindow.type = windowType.selectedItem.optionString;
				newWindow.title = titleString.text;
				newWindow.alwaysInFront = alwaysInFrontOption.selected;
				newWindow.showStatusBar = false;
				newWindow.layout = "absolute";
				
 				//create the window
				newWindow.open(false);				
				
				//set the window bounds
				newWindow.nativeWindow.x = Number(xPosition.text); 
				newWindow.nativeWindow.y = Number(yPosition.text);
				newWindow.width = Number(widthValue.text); 
				newWindow.height = Number(heightValue.text);

				//add a content to the window
				var exampleContent:DateChooser = new DateChooser();
				exampleContent.setStyle("top",10);
				exampleContent.setStyle("left",10);
				exampleContent.setStyle("bottom",10);
				exampleContent.setStyle("right",10);
				newWindow.addChild(exampleContent);
				
				//show the window
				newWindow.activate();
			}
			
			//create a new ActionScript (native) window
			private function createNewActionScriptWindow():void{
				//create the init options
				var options:NativeWindowInitOptions =
					new NativeWindowInitOptions();
					
				options.maximizable = maximizableOption.selected;
				options.minimizable = minimizableOption.selected;
				options.resizable = resizableOption.selected; 
				options.transparent = transparentOption.selected;
				options.systemChrome = Chrome.selectedItem.optionString;
				options.type = windowType.selectedItem.optionString;
				
				//create the window
				var newWindow:NativeWindow = new NativeWindow(options); 				
				newWindow.title = titleString.text;
				newWindow.alwaysInFront = alwaysInFrontOption.selected;
				newWindow.x = Number(xPosition.text);
				newWindow.y = Number(yPosition.text);
				newWindow.width = Number(widthValue.text);
				newWindow.height = Number(heightValue.text);
								
				//add a sprite to the window
				var client:Sprite = new Sprite();
				var rectSize:int = 40;
				var rectSpace:int = 4;
				with(client.graphics){
					lineStyle(1,0,1);
					beginFill(0x234578,.5);

					for(var i:int = 0; i <= Math.floor(newWindow.stage.stageWidth/(rectSize + rectSpace)); i++){
						for (var j:int = 0; j <= Math.floor(newWindow.stage.stageHeight/(rectSize + rectSpace)); j++){
						    drawRoundRect(i*(rectSize+rectSpace),j*(rectSize+rectSpace),rectSize,rectSize,10,10);
					 	}//j loop
				 	}//i loop
				 	endFill();
				}

				newWindow.stage.addChild(client);

                //add handlers to move and close the window if there is no Chrome
                if(options.systemChrome == NativeWindowSystemChrome.NONE){
                    newWindow.stage.addEventListener(KeyboardEvent.KEY_DOWN,
                    	function(e:Event):void{e.target.stage.nativeWindow.close();});
                    newWindow.stage.addEventListener(MouseEvent.MOUSE_DOWN,
                    	function(e:Event):void{e.target.stage.nativeWindow.startMove();})
                }

				//set stage properties
				if(stageAlignment.selectedItem.optionString != "UseDefault"){
					newWindow.stage.align = stageAlignment.selectedItem.optionString;
				}
				if(ScaleMode.selectedItem.optionString != "UseDefault"){
					newWindow.stage.scaleMode = ScaleMode.selectedItem.optionString;
				}
				if(newWindow.stage.scaleMode != StageScaleMode.NO_SCALE){
					client.scaleX = 72/newWindow.stage.stageWidth;
					client.scaleY = 72/newWindow.stage.stageHeight;
				}

 				//show the new window
				newWindow.activate();
			}

			//create a new HTML window
			private function createNewHTMLWindow():void{
				//create the init options
				var options:NativeWindowInitOptions =
					new NativeWindowInitOptions();
					
				options.maximizable = maximizableOption.selected;
				options.minimizable = minimizableOption.selected;
				options.resizable = resizableOption.selected; 
				options.transparent = transparentOption.selected;
				options.systemChrome = Chrome.selectedItem.optionString;
				options.type = windowType.selectedItem.optionString;
				
				//create the window
				var html:HTMLLoader = HTMLLoader.createRootWindow(false,options,true,
													new Rectangle(Number(xPosition.text),
													Number(yPosition.text),
													Number(widthValue.text),
													Number(heightValue.text)));
				var newWindow:NativeWindow = html.stage.nativeWindow;
				newWindow.alwaysInFront = alwaysInFrontOption.selected;
				
				//add content to the window
				html.load(new URLRequest("app:/html/bounce.html"));
				html.addEventListener(Event.COMPLETE, loadDocument);
				function loadDocument(event:Event):void{
						html.window.document.title = titleString.text;
						
						//activate the new window
						newWindow.activate();
						html.removeEventListener(Event.COMPLETE, loadDocument);		
				};
				
                //add handlers to move and close the window if there is no Chrome
                if(options.systemChrome == NativeWindowSystemChrome.NONE){
                    newWindow.stage.addEventListener(KeyboardEvent.KEY_DOWN,
                    	function(e:Event):void{e.target.stage.nativeWindow.close();});
                    newWindow.stage.addEventListener(MouseEvent.MOUSE_DOWN,
                    	function(e:Event):void{e.target.stage.nativeWindow.startMove();})
                }
			}
			
			//Transparency and system chrome cannot be used together
			private function validateTransparency():void{
					Chrome.selectedIndex = 2;
			}
			
			//Lightweight windows cannot have system chrome
			private function validateType():void{
				if(windowType.selectedLabel == "Lightweight"){
						Chrome.selectedIndex = 2;
				}
			}

			//Windows with system chrome cannot use lightweight type or transparency
			private function validateChrome():void{
				if(Chrome.selectedLabel != "None"){
					transparentOption.selected= false;
					if(windowType.selectedLabel == "Lightweight"){
						windowType.selectedIndex = 0; 
					}
				}
			}

			//Flex sets the ScaleMode to noScale. Any other mode results in aberrant behavior.
			private function validateFlexOptions():void{
				ScaleMode.enabled = false;
			}
			
			//HTML windows set ScaleMode to noScale. Any other mode results in aberrant behavior.
			private function validateHTMLOptions():void{
				ScaleMode.enabled = false;
			}
			
			//ActionScript windows can use any scaleMode, but the content must be scaled properly
			//to fit the window size. 
			private function validateActionScriptOptions():void{
				ScaleMode.enabled = true;
			}
			
			//Handle menu interaction
			private function onMenuCommand(event:FlexNativeMenuEvent):void{
				switch(String(event.item.@command)){
					case "viewSource":
						viewSource();
						break;
					case "copySource":
						copySource();
						break;
					default:
						trace("Unknown menu command: " + event.item.@command);
				}
			}			
			
			/** 
			 * Opens the source viewer window.
			 * 
			 * Note, the source code must be packaged with the application for
			 * it to be viewable after installation.
			 */
			private function viewSource(event:Event = null):void{
				var viewer:* = sourceView.window.air.SourceViewer.getDefault();
				viewer.setup({ exclude:["SourceViewer","WindowSampler.swf", "WindowSampler-app.xml", "icons", "html"] });
				viewer.viewSource();
			}	
			
			/** 
			 * Copies the source code to a user-selected directory.
			 * 
			 * Note, the source code must be packaged in a directory named "Source" 
			 * for it to be copyable after installation.
			 */
			private function copySource(event:Event = null):void{
				var baseDir:File = new File();
				baseDir.addEventListener(Event.SELECT, dirSelected);
				baseDir.browseForDirectory("Select location for source folder");
				function dirSelected(e:Event):void {
					var destinationDir:File = baseDir.resolvePath("Window Sampler Source");
					var sourceDir:File = File.applicationDirectory.resolvePath("Source");
					sourceDir.copyTo(destinationDir,true);
				}		
			}		
													
		]]>
	</mx:Script>
	<mx:FlexNativeMenu 	id="flexMenu" labelField="@label" 
						showRoot="false" itemClick="{onMenuCommand(event)}">
		<mx:dataProvider>
			<mx:XML format="e4x">
			 	<menubar>
				 	<menu label="Source code">
				    		<menuitem label="View source" command="viewSource"/>
			    			<menuitem label="Copy source" command="copySource"/>
					</menu>
				</menubar>
			</mx:XML>
		</mx:dataProvider>					
	</mx:FlexNativeMenu>
		
	<mx:Label text="Title:" x="10" y="10"/>
	<mx:TextInput id="titleString" text="Title" editable="true" x="52" y="8" width="311"/>
	<mx:HBox x="27" y="36" width="336">
		<mx:Label text="x:"/>
		<mx:TextInput width="40" id="xPosition" text="10"/>
		<mx:Label text="y:"/>
		<mx:TextInput width="40" id="yPosition" text="10"/>
		<mx:Label text="width:"/>
		<mx:TextInput width="40" id="widthValue" text="400"/>
		<mx:Label text="height:"/>
		<mx:TextInput width="40" id="heightValue" text="350"/>
	</mx:HBox>
	<mx:VBox height="216" width="154" x="52" y="68" borderStyle="none">
    	<mx:Label text="Window Type:"/>
    	<mx:ComboBox id="windowType" width="139" labelField="label" selectedIndex="0" cornerRadius="0" change="validateType();">
    	     <mx:ArrayCollection>
    	        <mx:Object label="Normal" optionString="{NativeWindowType.NORMAL}"/>
    	        <mx:Object label="Utility" optionString="{NativeWindowType.UTILITY}"/>
    	        <mx:Object label="Lightweight" optionString="{NativeWindowType.LIGHTWEIGHT}"/>
    	     </mx:ArrayCollection>
    	</mx:ComboBox>
    	<mx:Label text="System Chrome:" width="127"/>
    	<mx:ComboBox id="Chrome" width="139" labelField="label" height="21" selectedIndex="0" cornerRadius="0" change="validateChrome();">
    	     <mx:ArrayCollection>
    	        <mx:Object label="Standard" optionString="{NativeWindowSystemChrome.STANDARD}"/>
    	        <mx:Object label="None" optionString="{NativeWindowSystemChrome.NONE}"/>
    	     </mx:ArrayCollection>
    	</mx:ComboBox>
    	<mx:Label text="Stage Scale Mode:"/>
    	<mx:ComboBox id="ScaleMode" enabled="false" width="139" labelField="label" height="21" selectedIndex="0" cornerRadius="0">
    	     <mx:ArrayCollection>
    	        <mx:Object id="noScale" label="No scaling" optionString="{StageScaleMode.NO_SCALE}"/>
    	        <mx:Object id="exactFit" label="Exact fit" optionString="{StageScaleMode.EXACT_FIT}"/>
    	        <mx:Object id="noBorder" label="No border" optionString="{StageScaleMode.NO_BORDER}"/>
    	        <mx:Object id="showAll" label="Show all" optionString="{StageScaleMode.SHOW_ALL}"/>
    	     </mx:ArrayCollection>
    	</mx:ComboBox>
    	<mx:Label text="Stage Alignment:"/>    	
       	<mx:ComboBox id="stageAlignment" width="139" labelField="label" height="21" selectedIndex="4" cornerRadius="0">
    	     <mx:ArrayCollection>
    	        <mx:Object label="Top" optionString="{StageAlign.TOP}"/>
    	        <mx:Object label="Bottom" optionString="{StageAlign.BOTTOM}"/>
    	        <mx:Object label="Left" optionString="{StageAlign.LEFT}"/>
    	        <mx:Object label="Right" optionString="{StageAlign.RIGHT}"/>
    	        <mx:Object label="Top left" optionString="{StageAlign.TOP_LEFT}"/>
    	        <mx:Object label="Top right" optionString="{StageAlign.TOP_RIGHT}"/>
    	        <mx:Object label="Bottom left" optionString="{StageAlign.BOTTOM_LEFT}"/>
    	        <mx:Object label="Bottom right" optionString="{StageAlign.BOTTOM_RIGHT}"/>
    	        <mx:Object label="Use default" optionString="UseDefault"/>
    	     </mx:ArrayCollection>
    	</mx:ComboBox>
	</mx:VBox>

	<mx:VBox height="218" width="149" x="214" y="66" borderStyle="inset">
		<mx:Label x="316" y="99" text="Window Options:"/>
	    <mx:CheckBox id="maximizableOption" x="316" y="116" label="Maximizable" selected="true"/>
	    <mx:CheckBox id="minimizableOption" label="Minimizable" selected="true"/>
	    <mx:CheckBox id="resizableOption" label="Resizable" selected="true"/>	
	    <mx:CheckBox id="transparentOption" label="Transparent" width="114" selected="false" enabled="true" change="validateTransparency();"/>
	    <mx:CheckBox id="alwaysInFrontOption" label="Always in Front" width="114" selected="false" enabled="true"/>
	</mx:VBox>
	<mx:Button x="135.5" y="337" label="Create Window" id="createWindowButton" fillAlphas="[1.0, 1.0]" 
		click="createWindow();" fillColors="[#FEFEFE, #A7AFA5]"/>
	<mx:RadioButtonGroup id="windowTechnology"/>
	<mx:RadioButton id="flex" x="27" y="292" label="Flex window" groupName="windowTechnology" selected="true" click="validateFlexOptions()" width="94"/>
	<mx:RadioButton id="html" x="125" y="292" label="HTML window" groupName="windowTechnology" click="validateHTMLOptions()" width="107.5"/>
	<mx:RadioButton id="actionscript" x="240.5" y="292" label="ActionScript window" groupName="windowTechnology" click="validateActionScriptOptions()" width="141.5"/>
</mx:WindowedApplication>
