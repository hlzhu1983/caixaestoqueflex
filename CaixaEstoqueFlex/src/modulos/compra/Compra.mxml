<?xml version="1.0" encoding="utf-8"?>
<mx:Window  xmlns:mx="http://www.adobe.com/2006/mxml" layout="absolute" 
	width="952" height="466" title="Pré-Venda"
	xmlns:utilidades="utilidades.*" fontSize="12" closing="{this.onCloseCommand(event)}"
	keyDown="keyEvento(event)"  backgroundAlpha="1.0" xmlns:inputs="utilidades.inputs.*" 
	xmlns:botoes="utilidades.botoes.*" xmlns:local="*" creationComplete="init()" alpha="1.0" borderColor="#009DFF" xmlns:prevenda="modulos.prevenda.*">
	
	<mx:Script>
		<![CDATA[
			import negocio.vo.FornecedorVO;
			import mx.events.ItemClickEvent;
			import negocio.vo.ItemCompraVO;
			import mx.managers.PopUpManager;
			import events.ProdutoEvent;
			import modulos.produto.BuscaProduto;
			import mx.rpc.events.ResultEvent;
			import events.ItemCompraEvent;
			import mx.core.Application;
			import negocio.vo.ProdutoVO;
			import utilidades.Util;
			import negocio.remote.Remote;
			import negocio.vo.CompraVO;
			import mx.events.ValidationResultEvent;
			import mx.controls.Alert;
			import mx.collections.ArrayCollection;
			import mx.events.CloseEvent;
			
			
			[Bindable]
			private var array_itensCompras:ArrayCollection = new ArrayCollection();
			
			[Bindable]
			public var isProduto:Boolean = false;
			
			[Bindable]
			private var isFecharCompra:Boolean = false;
			
			[Bindable]
			public var compra:CompraVO;
			public var fornecedor:FornecedorVO;
			public var ro:Remote = Remote.getInstance();
			
			public var produto:ProdutoVO;
			
			[Bindable]
			public var valorTotal:Number = 0;
					
			private function init():void{
				this.ro.parent = this;
				this.compra = new CompraVO();
				this.compra.codUsuario = 0;
				this.compra.codFornecedor = 0;
				this.compra.NF = "";
				
				this.focusManager.setFocus(this.codProduto);
			}
			
			private function procurarFornecedor():void{
				this.titleWindow_BuscaFornecedor = BuscaFornecedor(Util.abrePopUp(this,BuscaFornecedor,true));
				this.titleWindow_BuscaFornecedor.addEventListener(FornecedorEvent.FORNECEDORSELECIONADO,result_buscaFornecedor);
			}
			
			
			private function result_buscaFornecedor(event:FornecedorEvent):void{
				this.fornecedor = event.fornecedor;
				this.ti_nomeFornecedor.text = this.fornecedor.nome;
			}
			
			private function result_abrirCompra(event:ResultEvent):void{
				this.compra = event.result as CompraVO;
			}
			
			public function produtoSelecionado(e:ProdutoEvent):void{
				this.codProduto.text = e.produto.codigo.toString();
				this.previewProduto();
			}
			
			public function addItemProduto(event:ItemCompraEvent):void{
				event.itemCompra.codigoPrevenda = this.compra.codigo;
				var i:ItemCompraVO = event.result as ItemCompraVO;
				this.array_itensCompras.addItem(i);				
				this.valorTotal += i.valor;
				this.isProduto = true;
				this.focusManager.setFocus(this.codProduto);
			}
			
			
						
        	private function keyEvento(event:KeyboardEvent):void{
        		switch(event.keyCode){
        			case 123: 
						this.stage.displayState = StageDisplayState.FULL_SCREEN_INTERACTIVE;
        				break;
        			case 46:
        				if(event.ctrlKey){
	        				if(event.target == produtos){ 
	        					if(this.produtos.selectedIndex > -1){
	        						Alert.show("Deseja realmente deletar o item?",
	        							"Alerta",Alert.OK | Alert.CANCEL,this,removeItemArrayCollection,null,Alert.OK);
	        					}else{
	        						Alert.show("Não há item selecionado!","Ops!",4,this);
	        					}							
	        				}
        				}
        				break;
        		}
        	}
        	
        	public function removeItemArrayCollection(event:CloseEvent):void{
        		if(event.detail == Alert.OK){
        			this.ro.removerItemCompra(result_removeItemArrayCollection,this.array_itensCompras.getItemAt(this.produtos.selectedIndex) as ItemCompraVO);
        		}
        		
        	}
        	
        	private function result_removeItemArrayCollection(event:ResultEvent):void{
        		this.valorTotal -= this.array_itensCompras.getItemAt(this.produtos.selectedIndex).valor;
        			this.array_itensCompras.removeItemAt(this.produtos.selectedIndex);        			
					if(this.array_itensCompras.length == 0){
							this.isProduto = false;
						}	
        	}
			
			public function onCloseCommand(event:Event):void{
				if(!isFecharCompra){
					event.preventDefault();
					this.cancelarCompra();
				}				
   			}	
			
			
			public function previewProduto():void{
				
				if(this.codProduto.validador.validate().type == ValidationResultEvent.INVALID){
					this.codProduto.setFocus();
				}else{
					this.ro.getProduto(result_previewProduto,this.codProduto.text,"codigo");
				}
			}
			
			public function result_previewProduto(e:ResultEvent):void{
				if(e.result == null){
					Alert.show("Produto não exite","Ops!",4,this,focusTextCodProduto);
				}else{
					var pvProduto:PreviewProdutoTitleWindow = PreviewProdutoTitleWindow(Util.abrePopUp(this,PreviewProdutoTitleWindow,true));
					pvProduto.addEventListener(ItemCompraEvent.ADICIONADOSUCEESSO,addItemProduto)
					pvProduto.setProduto(e.result as ProdutoVO);
					this.produto = e.result as ProdutoVO;
					this.codProduto.text = "";
				}
			}
			
			public function focusTextCodProduto(e:Event):void{
				this.codProduto.setFocus();
			}
			
			public function pesquisarProduto():void{
				var p:BuscaProduto = BuscaProduto(Util.abrePopUp(this,BuscaProduto,true));
				p.addEventListener(ProdutoEvent.PRODUTOSELECIONADO,produtoSelecionado);
			}
			
			private function fecharCompra():void{
				if(this.isProduto){
					if(this.fornecedor!=null){
					this.compra.valorTotal = this.valorTotal;
					this.compra.itemCompra = this.array_itensCompras;
					this.compra.codFornecedor = this.fornecedor.codigo;
					this.compra.NF = this.ti_NF.text;
					this.compra.codigo = Config.usuario.codigo;
					this.ro.fecharCompra(result_fecharCompra,this.compra);
					Util.abrePopUp(this,Impressao,true);
					
					new PrintCompra(this.i);
					}else{
						Alert.show("Selecione um Fornecedor","Ops!",4,this);
					}
				}else{
					Alert.show("Não ha produtos inseridos!","Ops!",4,this);
				}
			}
			
			private function result_fecharCompra(e:ResultEvent):void{
				this.isFecharCompra = true;
				Alert.show("Pré-venda gerada com sucesso","Aew!",4,this,this.fechando);
			}
			
			private function fechando(event:Event):void{
				this.stage.nativeWindow.close();
			}
			
			private function cancelarCompra():void{
				Alert.show("Deseja realemente cancelar a pré-venda?","Opa!",Alert.YES|Alert.NO,this,resposta_cancelarCompra);
			}
			
			private function resposta_cancelarCompra(event:CloseEvent):void{
				if(event.detail == Alert.YES){
					this.ro.cancelarCompra(result_cancelarCompra,this.compra);					
				}
				
			}
			
			private function result_cancelarCompra(e:ResultEvent):void{
				this.isFecharCompra = true;
				this.stage.nativeWindow.close();
			}
			
			
			
		]]>
	</mx:Script>
	
	<mx:VBox id="body" width="946" height="422" >
		<mx:ApplicationControlBar dock="true" width="100%" height="45" fillAlphas="[1.0, 1.0]" fillColors="[#FFFFFF, #D2D2D2]">
			<mx:Label text="Compra: " fontSize="30" />
			<mx:Label id="numPedido" text="{this.compra.codigo}" fontSize="30" />
			<mx:Spacer width="50%"/>
			<utilidades:RelogioDigital/>	
		</mx:ApplicationControlBar>
		<mx:VBox height="369" width="945">
			<mx:HBox width="100%" height="184" horizontalAlign="center">
				<mx:Panel width="372" height="163" layout="absolute" title="Informações">
					<mx:Label x="10" y="52" text="Fornecedor:"/>
					<mx:Label x="10" y="10" text="N° da Nota:" width="81"/>
					<botoes:BuscarButton x="252" y="82" click="{this.procurarFornecedor()}" height="24" label="Buscar" width="90"/>
					<mx:TextInput id="ti_nomeFornecedor" x="99" y="50" width="243" editable="false" borderColor="#CBCCCD" backgroundColor="#AABDF3" color="#000000" fontWeight="bold"/>
					<inputs:InteiroInput  id="ti_NF" requerido="true"  enter="{this.previewProduto()}" isEnter="false" x="99" y="8" fontSize="12" width="151"/>
				</mx:Panel>
			</mx:HBox>
			<mx:HBox width="939" height="183" horizontalAlign="center">
			<mx:DataGrid id="produtos"  width="607"  height="171" rowCount="10" dataProvider="{array_itensCompras}">
				<mx:columns>
					<mx:DataGridColumn headerText="Cod. Produto" dataField="codProduto"/>
					<mx:DataGridColumn headerText="Descrição" dataField="descricao"/>
					<mx:DataGridColumn headerText="Quantidade" dataField="quantidade"/>					
					<mx:DataGridColumn headerText="Valor de Compra" dataField="valor"/>
				</mx:columns>
			</mx:DataGrid>
			<mx:Panel title="Entrada de Produtos" layout="absolute" height="169" width="325">
				<mx:Label text="Código Produto:" x="18" y="17" fontSize="12"/>
				<inputs:InteiroInput  id="codProduto" requerido="true"  enter="{this.previewProduto()}" isEnter="false" x="129" y="15" fontSize="12" width="159"/>
				<botoes:BuscarButton  x="196.75" y="52" click="{this.pesquisarProduto()}" height="27"/>
			</mx:Panel>
			</mx:HBox>
		</mx:VBox>	
	</mx:VBox>
	<prevenda:Impressao id="i" pVenda="{this.compra}" visible="false"/>
	<mx:Button id="bt_gerarCompra" label="Salvar Compra" toolTip="Clique para gerar Compra"  click="{this.fecharCompra()}" x="624" y="430" width="139"/>
	<mx:Button id="bt_cancelarCompra" label="Cancelar Compra" toolTip="Clique para cancelar Compra"  x="801" y="430"  click="{this.cancelarCompra()}"/>
</mx:Window>
